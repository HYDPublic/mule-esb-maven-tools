/**
 * This file was automatically generated by the Mule ESB Maven Tools
 */
#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
package ${package};

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import org.junit.Test;
import org.mule.DefaultMuleMessage;
import org.mule.api.MuleMessage;
import org.mule.api.client.MuleClient;
import org.mule.transport.NullPayload;
#if(${domainGroupId} != 'empty')
import org.mule.tck.junit4.DomainFunctionalTestCase;

public class ExampleFunctionalTestCase extends DomainFunctionalTestCase
{
    private static final int RECEIVE_TIMEOUT = 5000;

    @Override
    protected String getDomainConfig()
    {
        //TODO Rename accordingly if needed.
        return "mule-domain-config.xml";
    }

    @Override
    public ApplicationConfig[] getConfigResources()
    {
        return new ApplicationConfig[] {
                new ApplicationConfig("myApp", new String[] {"src/main/app/mule-config.xml"})
        };
    }
#else
import org.mule.tck.junit4.FunctionalTestCase;

public class ExampleFunctionalTestCase extends FunctionalTestCase
{
    private static final int RECEIVE_TIMEOUT = 5000;

    @Override
    protected String getConfigFile()
    {
        return "src/main/app/mule-config.xml";
    }
#end

    @Test
    public void testConfiguration() throws Exception
    {
#if(${domainGroupId} != 'empty')
        MuleClient client = getMuleContextForApp("myApp").getClient();
        MuleMessage message = new DefaultMuleMessage("some data", getMuleContextForApp("myApp"));
#else
    	MuleClient client = muleContext.getClient();
        MuleMessage message = new DefaultMuleMessage("some data", muleContext);
#end
        client.dispatch("vm://in", message);
        MuleMessage result = client.request("vm://out", RECEIVE_TIMEOUT);
        assertNotNull(result);
        assertNull(result.getExceptionPayload());
        assertFalse(result.getPayload() instanceof NullPayload);

        //TODO Assert the correct data has been received
        assertEquals("some data Received", result.getPayloadAsString());
    }
}
